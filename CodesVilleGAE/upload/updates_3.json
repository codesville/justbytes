{"QandAList":
	[
			{"category":"Java","topic_id":"2","question":"What restrictions are placed on method overloading?","answer":"Two methods may not have the same name and argument list but different return types."},
			{"category":"Java","topic_id":"2","question":"Can a private method of a superclass be declared within a subclass?","answer":"Sure. A private field or method or inner class belongs to its declared class and hides from its subclasses.There is no way for private stuff to have a runtime overloading or overriding (polymorphism) features."},
			{"category":"Java","topic_id":"2","question":"What is the difference between a constructor and a method?","answer":"A constructor is a member function of a class that is used to create objects of that class, invoked using the new operator. It has the same name as the class and has no return type. They are only called once, whereas member functions can be called many times. A method is an ordinary member function of a class. It has its own name, a return type (which may be void), and is invoked using the dot operator. Constructor will be automatically invoked when an object is created whereas method has to be called explicitly."},
			{"category":"Java","topic_id":"2","question":"Can a top-level class be private or protected?","answer":"No. A top-level class cannot be private or protected. It can have either 'public' or no modifier. If it does not have a modifier it is supposed to have a default access. "},
			{"category":"Java","topic_id":"2","question":"Why Java does not support multiple inheritance? ","answer":"To avoid the diamond problem"},
			{"category":"Java","topic_id":"2","question":"Where and how can you use a private constructor?","answer":"Private constructor can be used if you do not want any other class to instantiate the class. This concept is generally used in Singleton Design Pattern. The instantiation of such classes is done from a static public method."},
			{"category":"Java","topic_id":"2","question":"How are this() and super() used with constructors?","answer":"this() is used to invoke a constructor of the same class. super() is used to invoke a superclass constructor."},
			{"category":"Java","topic_id":"2","question":"What is Method Overriding?","answer":"When a class defines a method using the same name, return type, and argument list as that of a method in its superclass, the method in the subclass is said to override the method present in the Superclass. When the method is invoked for an object of the class, it is the new definition of the method that is called, and not the method definition from superclass."},
			{"category":"Java","topic_id":"2","question":"What restrictions are placed on method overriding?","answer":"Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides. Methods may be overridden to be more public, not more private.The overriding method may not throw any exceptions that may not be thrown by the overridden method."},
			{"category":"Java","topic_id":"2","question":"What is the difference between a 'Class' and an 'Object'?","answer":"The Object class is the highest-level class in the Java class hierarchy. The Class class is used to represent the classes and interfaces that are loaded by a Java program. The Class class is used to obtain information about an object's design. A Class is only a definition or prototype of real life object. Whereas an object is an instance or living representation of real life object."},
			{"category":"Java","topic_id":"2","question":"What is difference between overloading and overriding?","answer":"Method overloading: When 2 or more methods in a class have the same method names with different arguments, it is said to be method overloading. Overloading does not block inheritance from the superclass. Overloaded methods must have different method signatures. Method overriding : When a method in a class has the same method name with same arguments as that of the superclass, it is said to be method overriding. Overriding blocks inheritance from the superclass. Overridden methods must have same signature. Basically overloading and overriding are different aspects of polymorphism. Overloading is Static/early binding polymorphism whereas overriding is dynamic/late binding polymorphism"},
			{"category":"Java","topic_id":"2","question":"If a class is declared without any access modifiers, where may the class be accessed?","answer":"A class that is declared without any access modifiers is said to have package or default access. This means that the class can only be accessed by other classes and interfaces that are defined within the same package."},
			{"category":"Java","topic_id":"2","question":"Can a lock be acquired on a class?","answer":"Yes, a lock can be acquired on a class. This lock is acquired on the class's Class object."}
	]
}
