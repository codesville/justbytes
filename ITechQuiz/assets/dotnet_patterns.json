{"QandAList":
	[
				{"category":".NET","topic_id":"18","question":"What are design patterns ?","answer":"Design patterns are recurring solution to recurring problems in software architecture."},
				{"category":".NET","topic_id":"18","question":"List Creational Patterns?","answer":"Abstract Factory:- Creates an instance of several families of classes. Builder :- Separates object construction from its representation. Factory Method:- Creates an instance of several derived classes . Prototype:- A fully initialized instance to be copied or cloned . Singleton:- A class of which only a single instance can exist .The best way to remember Creational pattern is by ABFPS (Abraham Became First President of States)."},
				{"category":".NET","topic_id":"18","question":"List Structural Patterns","answer":"Adapter:-Match interfaces of different classes. Bridge:-Separates an object's interface from its implementation. Composite:-A tree structure of simple and composite objects. Decorator :-Add responsibilities to objects dynamically. Facade:-A single class that represents an entire subsystem. Flyweight:-A fine-grained instance used for efficient sharing. Proxy:-An object representing another object.To remember structural pattern :(ABCDFFP)"},
				{"category":".NET","topic_id":"18","question":"List Behavioral Patterns","answer":"Mediator:-Defines simplified communication between classes. Memento:-Capture and restore an object's internal state. Interpreter:-A way to include language elements in a program. Iterator:-Sequentially access the elements of a collection. Chain of Responsibility:-A way of passing a request between a chain of objects. Command:-Encapsulate a command request as an object. State:-Alter an object's behavior when its state changes. Strategy:-Encapsulates an algorithm inside a class. Observer:-A way of notifying change to a number of classes. Template Method:-Defer the exact steps of an algorithm to a subclass. Visitor:-Defines a new operation to a class without change.To remember: 2 MICS On TV (MMIICCSSOTV)."},
				{"category":".NET","topic_id":"18","question":"What's difference between Factory and Abstract Factory Pattern's?","answer":"The main difference between factory and Abstract factory is factory method uses inheritance to decide which object has to be instantiated. While abstract factory uses delegation to decide instantiation of object. We can say Abstract factory uses factory method to complete the architecture. Abstract Factory is one level higher in abstraction over Factory."},
				{"category":".NET","topic_id":"18","question":"What's MVC pattern?","answer":"The main purpose using MVC pattern is to decouple the GUI from the Data. It also gives the ability to provide multiple views for the same Data.MVC pattern separates objects in to three important sections:- a) Model: - For maintaining data. It is actually where your business logic, querying database, database connection etc. is actually implemented.b) Views: - Displaying all or some portion of data, or probably different view of data. View is responsible for look and feel, Sorting, formatting etc. c) Controller: - They are event handling section which affects either the model or the view. Controller responds to the mouse or keyboard input to command model and view to change. Controllers are associated with views."},
				{"category":".NET","topic_id":"18","question":"How can we implement observer pattern in .NET?","answer":"Observer patterns can be implemented using 'Delegates' and 'Events'."},
				{"category":".NET","topic_id":"18","question":"What are different ways you can pass data between tiers?","answer":"There are many ways you can pass data between tiers :- Dataset the most preferred one as they maintain data in XML format. Datareader. Custom classes. XML."}		
	]
}
