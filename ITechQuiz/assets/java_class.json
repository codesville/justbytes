{
    "QandAList": [
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What restrictions are placed on method overloading?",
            "answer": "Two methods may not have the same name and argument list but different return types."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Can a private method of a superclass be declared within a subclass?",
            "answer": "Sure. A private field or method or inner class belongs to its declared class and hides from its subclasses.There is no way for private stuff to have a runtime overloading or overriding (polymorphism) features."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is the difference between a constructor and a method?",
            "answer": "A constructor is a member function of a class that is used to create objects of that class, invoked using the new operator. It has the same name as the class and has no return type. They are only called once, whereas member functions can be called many times. A method is an ordinary member function of a class. It has its own name, a return type (which may be void), and is invoked using the dot operator. Constructor will be automatically invoked when an object is created whereas method has to be called explicitly."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Can a top-level class be private or protected?",
            "answer": "No. A top-level class cannot be private or protected. It can have either 'public' or no modifier. If it does not have a modifier it is supposed to have a default access. "
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Why Java does not support multiple inheritance? ",
            "answer": "To avoid the diamond problem"
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Where and how can you use a private constructor?",
            "answer": "Private constructor can be used if you do not want any other class to instantiate the class. This concept is generally used in Singleton Design Pattern. The instantiation of such classes is done from a static public method."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "How are this() and super() used with constructors?",
            "answer": "this() is used to invoke a constructor of the same class. super() is used to invoke a superclass constructor."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is Method Overriding?",
            "answer": "When a class defines a method using the same name, return type, and argument list as that of a method in its superclass, the method in the subclass is said to override the method present in the Superclass. When the method is invoked for an object of the class, it is the new definition of the method that is called, and not the method definition from superclass."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What restrictions are placed on method overriding?",
            "answer": "Overridden methods must have the same name, argument list, and return type. The overriding method may not limit the access of the method it overrides. Methods may be overridden to be more public, not more private.The overriding method may not throw any exceptions that may not be thrown by the overridden method."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is the difference between a 'Class' and an 'Object'?",
            "answer": "The Object class is the highest-level class in the Java class hierarchy. The Class class is used to represent the classes and interfaces that are loaded by a Java program. The Class class is used to obtain information about an object's design. A Class is only a definition or prototype of real life object. Whereas an object is an instance or living representation of real life object."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is difference between overloading and overriding?",
            "answer": "Method overloading: When 2 or more methods in a class have the same method names with different arguments, it is said to be method overloading. Overloading does not block inheritance from the superclass. Overloaded methods must have different method signatures. Method overriding : When a method in a class has the same method name with same arguments as that of the superclass, it is said to be method overriding. Overriding blocks inheritance from the superclass. Overridden methods must have same signature. Basically overloading and overriding are different aspects of polymorphism. Overloading is Static/early binding polymorphism whereas overriding is dynamic/late binding polymorphism"
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "If a class is declared without any access modifiers, where may the class be accessed?",
            "answer": "A class that is declared without any access modifiers is said to have package or default access. This means that the class can only be accessed by other classes and interfaces that are defined within the same package."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Does a class inherit the constructors of its superclass?",
            "answer": "A class does not inherit constructors from any of its super classes."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Can an object's finalize() method be invoked while it is reachable?",
            "answer": "An object's finalize() method cannot be invoked by the garbage collector while the object is still reachable. However, an object's finalize() method may be invoked by other objects."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is the purpose of the Runtime class?",
            "answer": "The purpose of the Runtime class is to provide access to the Java runtime system. It returns the runtime information like memory availability."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is the purpose of the System class?",
            "answer": "The purpose of the System class is to provide access to system resources."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Can an unreachable object become reachable again?",
            "answer": "An unreachable object may become reachable again. This can happen when the object's finalize() method is invoked and the object performs an operation which causes it to become accessible to reachable object."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is a bean? Where can it be used?",
            "answer": "A Bean is a reusable and self-contained software component. Beans created using java take advantage of all the security and platform independent features of java. Bean can be plugged into any software application. Bean is a simple class which has set and get methods."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is the functionality of instanceOf() ?",
            "answer": "instanceOf opertaor is used to check whether an object can be cast to a specific type without throwing ClassCastException."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What are the other ways to create an object other than creating as new object?",
            "answer": "1) new MyClass(), 2) Class.forName(classNameStr): Classname obj = Class.forName('Fully Qualified class Name').newInstance(); 3.newInstance 4.object.clone"
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What is the difference between abstract class and interface?",
            "answer": "a) All the methods declared inside an interface are abstract whereas abstract class must have at least one abstract method and others may be concrete or abstract. b) In abstract class, key word abstract must be used for the methods whereas interface we need not use that keyword for the methods. c) Abstract class must have subclasses whereas interface can't have subclasses."
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "What are marker interfaces?",
            "answer": "They tell the compiler that the objects of this class need to be treated differently.Eg: Serializable, Remote, Cloneable"
        },
        {
            "category": "Java",
            "topic_id": "2",
            "question": "Can a lock be acquired on a class?",
            "answer": "Yes, a lock can be acquired on a class. This lock is acquired on the class's Class object."
        }
    ]
}