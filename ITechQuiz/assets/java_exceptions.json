{"QandAList":
	[
				{"category":"Java","topic_id":"7","question":"How are try, catch and finally block organized?","answer":"A try block should associate with at least a catch or a finally block. The sequence of try, catch and finally matters a lot. If you modify the order of these then the code won't compile. Adding to this there can be multiple catch blocks associated with a try block. The final concept is there should be a single try, multiple catch blocks and a single finally block in a try-catch-finally block."},
				{"category":"Java","topic_id":"7","question":"What is the use of throws keyword?","answer":"If a method is capable of causing an exception that it does not handle, it must specify this behavior so that callers of the method can guard themselves against that exception. You do this by including a throws clause in the method's declaration."},
				{"category":"Java","topic_id":"7","question":"What are Checked Exceptions and Unchecked Exceptions?","answer":"The types of exceptions that need not be included in a methods throws list are called Unchecked/Runtime Exceptions.Runtime exceptions need not be explicitly caught in try catch block.Eg:  ArithmeticException, ArrayIndexOutOfBoundsException,  ClassCastException,  IndexOutOfBoundsException,NullPointerException.Checked exception are the exceptions which forces the programmer to catch them explicitly in try-catch block. It is a subClass of Exception. Example: IOException. "},
				{"category":"Java","topic_id":"7","question":"What is difference between ClassNotFoundException and NoClassDefFoundError?","answer":"A ClassNotFoundException is thrown when the reported class is not found by the ClassLoader in the CLASSPATH during runtime. It could also mean that the class in question is trying to be loaded from another class which was loaded in a parent classloader and hence the class from the child classloader is not visible.NoClassDefFoundError happens when Java Virtual Machine is not able to find a particular class at runtime which was available during compile time."},
				{"category":"Java","topic_id":"7","question":"Where is the clean up code like release of resources is put in try-catch-finally block and why?","answer":"The code is put in a finally block because irrespective of try or catch block execution the control will flow to finally block. Typically finally block contains release of connections, closing of result set etc. "},
				{"category":"Java","topic_id":"7","question":"Is it valid to place some code in between try the catch/finally block that follows it?","answer":"No. There should not be any line of code present between the try and the catch/finally block."},
				{"category":"Java","topic_id":"7","question":"What happens if the exception is never caught and throws down the method stack? ","answer":"If the exception is not caught by any of the method in the method's stack till you get to the main() method, the main method throws that exception and the JVM halts its execution. "},
				{"category":"Java","topic_id":"7","question":"What happens if a method does not throw an checked Exception directly but calls a method that does? What does 'Ducking' the exception mean?","answer":"If a method does not throw an checked Exception directly but calls a method that throws an exception then the calling method must handle the throw exception or declare the exception in its throws clause. If the calling method does not handle and declares the exception, the exceptions is passed to the next method in the method stack. This is called as ducking the exception down the method stack. "},
				{"category":"Java","topic_id":"7","question":"Can a catch block throw the exception caught by itself?","answer":"Yes. This is called rethrowing of the exception by catch block. "},
				{"category":"Java","topic_id":"7","question":"If I write System.exit (0); at the end of the try block, will the finally block still execute?","answer":"No"},
				{"category":"Java","topic_id":"7","question":"What are Chained Exceptions?","answer":"When an application responds to an exception by throwing another exception, it is very useful to know when an exception caused another. Chained Exceptions help the programmer do this. Throwable getCause(),Throwable initCause(Throwable) "},
				{"category":"Java","topic_id":"7","question":"Does it matter in what order catch statements for FileNotFoundException and IOException are written? ","answer":"Yes, it does. The child exceptions classes must always be caught first and the \"Exception\" class should be caught last. "},
				{"category":"Java","topic_id":"7","question":"Can try statements be nested?","answer":"Try statements can be tested. It is possible to nest them to any level, but it is preferable to keep the nesting to 2 or 3 levels at max. "},
				{"category":"Java","topic_id":"7","question":"What is the base class for all exceptions","answer":"Throwable"},
				{"category":"Java","topic_id":"7","question":"When you extend a class and override a method, can this new method throw exceptions other than those that were declared by the original method? ","answer":"No it cannot throw, except for the subclasses of the exceptions thrown by the parent class's method. "},
				{"category":"Java","topic_id":"7","question":"What is the new try-with-resourses introduced in Java 7?","answer":"try-with-resources, also called ARM (Automatic Resource Management) blocks. The resources declared as args withing the try statement are automatically closed after the try. In the try resources list, you can declare several resources, but all these resources must implement the java.lang.AutoCloseable interface.The new statement make working with streams and all kind of closeable resources easier. try (InputStream fis = new FileInputStream(source);  OutputStream fos = new FileOutputStream(target)){...} catch (Exception e) { e.printStackTrace(); }"},
				{"category":"Java","topic_id":"7","question":"What is the improvement in declaring multiple catch blocks in Java 7?","answer":"A single catch block can handle more than one type of exception by declaring all possible exceptions separated by pipe '|'. catch (NumberFormatException | NullPointerException e)."}
	]
}