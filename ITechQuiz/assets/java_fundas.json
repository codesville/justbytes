{"QandAList":
	[
				{"category":"Java","topic_id":"1","question":"What is OOPs?","answer":"Object oriented programming organizes a program around its data, i. e. , objects and a set of well defined interfaces to that data. An object-oriented program can be characterized as data controlling access to code."},
				{"category":"Java","topic_id":"1","question":"What are Encapsulation, Inheritance and Polymorphism?","answer":"Encapsulation is the mechanism that binds together code and data it manipulates and keeps both safe from outside interference and misuse. Inheritance is the process by which one object acquires the properties of another object. Polymorphism is the feature that allows one interface to be used for general class actions."},
				{"category":"Java","topic_id":"1","question":"What are Class, Constructor and Primitive data types?","answer":"Class is a template for multiple objects with similar features and it is a blue print for objects. It defines a type of object according to the data the object can hold and the operations the object can perform. Constructor is a special kind of method that determines how an object is initialized when created. Primitive data types are 8 types and they are: byte, short, int, long, float, double, boolean, char."},
				{"category":"Java","topic_id":"1","question":"What are different types of access modifiers?","answer":"public: Any thing declared as public can be accessed from anywhere. private: Any thing declared as private can't be seen outside of its class. protected: Any thing declared as protected can be accessed by classes in the same package and subclasses in the other packages. default modifier : Can be accessed only to classes in the same package."},
				{"category":"Java","topic_id":"1","question":"What are Transient and Volatile Modifiers?","answer":"Transient: The transient modifier applies to variables only and it is not stored as part of its object's Persistent state. Transient variables are not serialized. Volatile: Volatile modifier applies to variables only and it tells the compiler that the variable modified by volatile can be changed unexpectedly by other parts of the program."},
				{"category":"Java","topic_id":"1","question":"What is method overloading and method overriding?","answer":"Method overloading: When a method in a class having the same method name with different arguments is said to be method overloading. Method overriding : When a method in a class having the same method name with same arguments is said to be method overriding."},
				{"category":"Java","topic_id":"1","question":"What modifiers may be used with top-level class?","answer":"public, abstract and final can be used for top-level class."},
				{"category":"Java","topic_id":"1","question":"What are inner class and anonymous class?","answer":"Inner class : classes defined in other classes, including those defined in methods are called inner classes. An inner class can have any accessibility including private. Anonymous class : Anonymous class is a class defined inside a method without a name and is instantiated and declared in the same place and cannot have explicit constructors."},
				{"category":"Java","topic_id":"1","question":"What is a cloneable interface and how many methods does it contain?","answer":"It is not having any method because it is a TAGGED or MARKER interface."},
				{"category":"Java","topic_id":"1","question":"Can you have an inner class inside a method and what variables can you access?","answer":"Yes, we can have an inner class inside a method and final variables can be accessed."},
				{"category":"Java","topic_id":"1","question":"What is immutable object?","answer":"You need to make class final and all its member final so that once objects gets crated no one can modify its state. You can achieve same functionality by making member as non final but private and not modifying them except in constructor."},
				{"category":"Java","topic_id":"1","question":"What is the difference between creating String as new () and literal?","answer":"When we create string with new () it's created in heap and not added into string pool while String created using literal are created in String pool itself which exists in Perm area of heap."},
				{"category":"Java","topic_id":"1","question":"How do you know if an explicit object casting is needed?","answer":"If you assign a superclass object to a variable of a subclass's data type, you need to do explicit casting. For example: Object a; Customer b; b = (Customer) a; When you assign a subclass to a variable having a supeclass type, the casting is performed automatically."},
				{"category":"Java","topic_id":"1","question":"If you're overriding the method equals() of an object, which other method you might also consider?","answer":"hashCode()"},
				{"category":"Java","topic_id":"1","question":"Does Java support multiple inheritance?","answer":"Java does not have multiple inheritance in the classical sense of the word. The right answer should be 'no', or 'no, but'. 'Interfaces' are one way of emulating multiple inheritance."},
				{"category":"Java","topic_id":"1","question":"Can we serialize a static variable? ","answer":"Yes. If you don't want to, then it needs to be declared as 'transient'."},
				{"category":"Java","topic_id":"1","question":"What is the difference between length and length() ?","answer":"length() is a method defined for String class whereas length is an attribute of an array."},
				{"category":"Java","topic_id":"1","question":"What is difference between & and && in java?","answer":"& is bitwise and operator whereas && is short circuit operator.When we use '&', both the left and right operands will be evaluated, whereas using '&&', only the evaluation of left side could decide the result.In that case we use short circuit operator."},
				{"category":"Java","topic_id":"1","question":"Is Java a strongly typed language?","answer":"Yes.After the introduction of Generics it is strongly typed."},
				{"category":"Java","topic_id":"1","question":"What are the new features in Java 5 as compared to its earlier versions?","answer":"a.Garbage collection performance enhancements b.Introduction to StringBuilder c.Java 2D technology d.Image I/O - Performance and memory - Language Specific Features: a.Generics b.Enhanced for Loop c.Autoboxing/Unboxing d.Typesafe Enums e.Varargs f.Static Import g.Metadata (Annotations)"},
				{"category":"Java","topic_id":"1","question":"What is Autoboxing/Unboxing and what are its advantages?","answer":"The conversion from primitive types to wrapper types objects is automated. This facility eleminates pain of manual conversion from primitive to wrapper types. Boxing converts primitive values to objects of corresponding wrapper types. Unboxing converts objects of wrapper types to values of corresponding primitive types."},
				{"category":"Java","topic_id":"1","question":"What gives java it's 'write once and run anywhere' nature?","answer":"All Java programs are compiled into class files that contain bytecodes. These byte codes can be run in any platform and hence java is said to be platform independent."},
				{"category":"Java","topic_id":"1","question":"What is JNI?","answer":"JNI is an acronym of Java Native Interface. Using JNI we can call functions which are written in other languages from Java. "},
				{"category":"Java","topic_id":"1","question":"What is serialization?","answer":"Object serialization provides a program the ability to read or write a whole object to and from a raw byte stream. A seralizable object must implement the Serilizable interface."}
	]
}