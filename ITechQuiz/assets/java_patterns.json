{"QandAList":
	[
				{"category":"Java","topic_id":"6","question":"What is a software design pattern?","answer":"A design pattern is a solution to a general software problem within a particular context.Design patterns capture solutions that have evolved over time as developers strive for greater flexibility in their software."},
				{"category":"Java","topic_id":"6","question":"What is Singleton pattern?","answer":"Singleton design pattern allows us to use just one instance of a particular class. It insures that one and only once instance of a particular class is used when requested. Assume what we are writing an application that needs to log events in a log file. Logging is done with timestamp. We do not want to have more than one instances of Logger otherwise the log file will be created with every instance. In this case, we use Singleton pattern and instantiate the logger when the first request comes or when the server is started. "},
				{"category":"Java","topic_id":"6","question":"Example of Singleton in JDK?","answer":"Runtime"},
				{"category":"Java","topic_id":"6","question":"Define creational design patterns?","answer":"Creational patterns are used to define and describe how objects are created at class instantiation time. Usually an abstract super class contains the details of the classes that are instantiated and the client class is unaware of such details. Singleton pattern, factory method pattern, abstract factory pattern are examples of creational design pattern. "},
				{"category":"Java","topic_id":"6","question":"How to you prevent instantiation of a singleton class from other classes?","answer":"Using a private constructor."},
				{"category":"Java","topic_id":"6","question":"What are the drawbacks of using singleton design pattern?","answer":"It introduces global state into an application and thus it makes unit testing far more difficult -access to the singleton in a multi-threaded context must be serialized "},
				{"category":"Java","topic_id":"6","question":"When will you use Abstract factory pattern?","answer":"Abstract factory pattern is preferred in situations where the names of actual implementing classes are not needed to be known at the client side. This would mean that we can change the implementation from one factory to another. "},
				{"category":"Java","topic_id":"6","question":"When cloning an object is preferred over creating a new one?","answer":"If cost of creating a new object is larger than the cost of cloning the object, then it is better to clone the object."},
				{"category":"Java","topic_id":"6","question":"What is prototype pattern?","answer":"Prototype simply means making a clone and it is used to cloning an object to avoid its creation. Java provides an interface called Cloneable whose method clone() is used to clone an object."},
				{"category":"Java","topic_id":"6","question":"What is Business Delegate pattern?","answer":"This pattern is used to reduce the coupling between the presentation and business-logic tier. It provides a proxy to the facade from where one could call the business classes or DAO class. This pattern can be used with Service Locator pattern for improving performance."},
				{"category":"Java","topic_id":"6","question":"What is Dispatcher View pattern?","answer":"This is similar to Service to Worker pattern except that it is used for smaller applications. In this one class is used for both request and view processing."},
				{"category":"Java","topic_id":"6","question":"What is Service to Worker pattern?","answer":"This is used in larger applications wherein one class is used to process the requests while the other is used to process the view part. This differentiation is done for maintainability."},
				{"category":"Java","topic_id":"6","question":"What is View Helper pattern?","answer":"The 'View' is responsible for the output-view formatting whereas 'Helper' component is responsible for the business logic. Helper components do content retrieval, validation and adaptation. Helper components generally use Business delegate pattern to access business classes."},
				{"category":"Java","topic_id":"6","question":"What is Front Controller pattern?","answer":"It manages and handles requests through a centralized code. This could either be through a servlet or a JSP (through a Java Bean). This Controller takes over the common processing which happens on the presentation tier. The front controller manages content retrieval, security, view management and retrieval."},
				{"category":"Java","topic_id":"6","question":"What is Intercepting Filter pattern?","answer":"Provides a solution for pre-processing and post-processing a request. It allows us to declaratively apply filters for intercepting requests and responses. For ex. Servlet filters."},
				{"category":"Java","topic_id":"6","question":"What is Composite View pattern?","answer":"This pattern is used for creating aggregate presentations (views) from atomic sub-components. This architecture enables says piecing together of elementary view components which makes the presentation flexible by allowing personalization and customization."},
				{"category":"Java","topic_id":"6","question":"What is Session Facade pattern?","answer":"This pattern hides the complexity of business components and centralizes the workflow. It provides course-grained interfaces to the clients which reduces the remote method overhead. This pattern fits well with declarative transactions and security management. "},
				{"category":"Java","topic_id":"6","question":"What is Service Locator pattern?","answer":"It provides a solution for looking-up, creating and locating services and encapsulating their complexity. It provides a single point of control and it also improves performance. "},
				{"category":"Java","topic_id":"6","question":"What is Data Access Object pattern?","answer":"It provides a flexible and transparent access to the data, abstracts the data sources and hides the complexity of Data persistence layer. This pattern provides for loose coupling between business and data persistence layer. "},
				{"category":"Java","topic_id":"6","question":"What is the difference between factory design pattern and abstract factory design pattern?","answer":"Factory Method pattern is a simplified version of Abstract Factory pattern. Factory Method pattern is responsible of creating products that belong to one family, while Abstract Factory pattern deals with multiple families of products.With the Abstract Factory pattern, a class delegates the responsibility of object instantiation to another object via composition whereas the Factory Method pattern uses inheritance and relies on a subclass to handle the desired object instantiation."}
	]
}