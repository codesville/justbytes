{"QandAList":
	[
				{"category":"Java","topic_id":"8","question":"What are the main components of JDBC ?","answer":"The life cycle of a servlet consists of the following phases:   DriverManager: Manages a list of database drivers. Matches connection requests from the java application with the proper database driver using communication subprotocol. The first driver that recognizes a certain subprotocol under JDBC will be used to establish a database Connection. Driver: The database communications link, handling all communication with the database. Normally, once the driver is loaded, the developer need not call it explicitly. Connection : Interface with all methods for contacting a database.The connection object represents communication context, i.e., all communication with database is through connection object only. Statement : Encapsulates an SQL statement which is passed to the database to be parsed, compiled, planned and executed. ResultSet: The ResultSet represents set of rows retrieved due to query execution."},
				{"category":"Java","topic_id":"8","question":"How is a database driver loaded in JDBC?","answer":"Load the driver class using Class.forName(). From Java 6/JDBC 4.0 onwards, placing the jar file in classpath is enough.he DriverManager class takes care of this by automatically locating a suitable driver when the DriverManager.getConnection() method is called."},
				{"category":"Java","topic_id":"8","question":"What is PreparedStatement?","answer":"A prepared statement is an SQL statement that is precompiled by the database. Through precompilation, prepared statements improve the performance of SQL commands that are executed multiple times (given that the database supports prepared statements). Once compiled, prepared statements can be customized prior to each execution by altering predefined SQL parameters. "},
				{"category":"Java","topic_id":"8","question":"What are callable statements ?","answer":"Callable statements are used from JDBC application to invoke stored procedures and functions."},
				{"category":"Java","topic_id":"8","question":"How to call a stored procedure from JDBC ?","answer":"PL/SQL stored procedures are called from within JDBC programs by means of the prepareCall() method of the Connection object created. A call to this method takes variable bind parameters as input parameters as well as output variables and creates an object instance of the CallableStatement class.CallableStatement stproc_stmt = conn.prepareCall(\"{call procname(?,?,?)}\");"},
				{"category":"Java","topic_id":"8","question":"What are types of JDBC drivers?","answer":"    Type 1: JDBC/ODBC:These require an ODBC (Open Database Connectivity) driver for the database to be installed. This type of driver works by translating the submitted queries into equivalent ODBC queries and forwards them via native API calls directly to the ODBC driver. It provides no host redirection capability. Type2: Native API (partly-Java driver):This type of driver uses a vendor-specific driver or database API to interact with the database. An example of such an API is Oracle OCI (Oracle Call Interface). It also provides no host redirection. Type 3: Open Protocol-Net:This is not vendor specific and works by forwarding database requests to a remote database source using a net server component. How the net server component accesses the database is transparent to the client. The client driver communicates with the net server using a database-independent protocol and the net server translates this protocol into database calls. This type of driver can access any database. Type 4: Proprietary Protocol-Net(pure Java driver):This has a same configuration as a type 3 driver but uses a wire protocol specific to a particular vendor and hence can access only that vendor's database. Again this is all transparent to the client."},
				{"category":"Java","topic_id":"8","question":"Which type of JDBC driver is the fastest one? ","answer":"JDBC Net pure Java driver(Type IV) is the fastest driver because it converts the JDBC calls into vendor specific protocol calls and it directly interacts with the database."},
				{"category":"Java","topic_id":"8","question":"Does the JDBC-ODBC Bridge support multiple concurrent open statements per connection?","answer":"No. You can open only one Statement object per connection when you are using the JDBC-ODBC Bridge."},
				{"category":"Java","topic_id":"8","question":"What are the standard isolation levels defined by JDBC?","answer":"TRANSACTION_NONE,  TRANSACTION_READ_COMMITTED, TRANSACTION_READ_UNCOMMITTED,   TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE"},
				{"category":"Java","topic_id":"8","question":"What is resultset ?","answer":"The ResultSet represents set of rows retrieved due to query execution.	ResultSet rs = stmt.executeQuery(sqlQuery);"},
				{"category":"Java","topic_id":"8","question":"What are the types of resultsets?","answer":"    TYPE_FORWARD_ONLY specifies that a resultset is not scrollable, that is, rows within it can be advanced only in the forward direction.  TYPE_SCROLL_INSENSITIVE specifies that a resultset is scrollable in either direction but is insensitive to changes committed by other transactions or other statements in the same transaction. TYPE_SCROLL_SENSITIVE specifies that a resultset is scrollable in either direction and is affected by changes committed by other transactions or statements within the same transaction."},
				{"category":"Java","topic_id":"8","question":"What is rowset?","answer":"A RowSet is an object that encapsulates a set of rows from either Java Database Connectivity (JDBC) result sets or tabular data sources like a file or spreadsheet."},
				{"category":"Java","topic_id":"8","question":"What are the different types  of RowSet ?","answer":"    Connected - A connected RowSet object connects to the database once and remains connected until the application terminates. Disconnected - A disconnected RowSet object connects to the database, executes a query to retrieve the data from the database and then closes the connection. A program may change the data in a disconnected RowSet while it is disconnected. Modified data can be updated in the database after a disconnected RowSet reestablishes the connection with the database."},
				{"category":"Java","topic_id":"8","question":"What is connection pooling? what is the main advantage of using connection pooling?","answer":"A connection pool is a mechanism to reuse connections created. Connection pooling can increase performance dramatically by reusing connections rather than creating a new physical connection each time a connection is requested."},
				{"category":"Java","topic_id":"8","question":"What is a DataSource?","answer":"A DataSource object is the representation of a data source in the Java programming language. In basic terms, A DataSource is a facility for storing data. DataSource can be referenced by JNDI. Data Source may point to RDBMS, file System , any DBMS etc."},
				{"category":"Java","topic_id":"8","question":"What are the different types of Statements?","answer":"Regular Statement (createStatement()), PreparedStatement(prepareStatement()) and CallableStatement (prepareCall()) "},
				{"category":"Java","topic_id":"8","question":"What does setAutoCommit do?","answer":"When a connection is created, it is in auto-commit mode. This means that each individual SQL statement is treated as a transaction and will be automatically committed right after it is executed. The way to allow two or more statements to be grouped into a transaction is to disable auto-commit mode"},
				{"category":"Java","topic_id":"8","question":"In Java Persistence API, What is an Entity class?","answer":"Entity class is the Persistable class that can be mapped to a database table with a primary key defined in table column."},
				{"category":"Java","topic_id":"8","question":"Do Entity class supports inheritence?","answer":"Yes, Entity class supports inheritence and inheritence could have Entity class extending non entity class or non-Entity class can extend Entity class."},
				{"category":"Java","topic_id":"8","question":"How to define an abstract class or concrete class as JPA Entity class?","answer":"By placing annotations @Entity in the class level for the Entity class or by defining the Entity class in deployment descriptor."}
	]
}