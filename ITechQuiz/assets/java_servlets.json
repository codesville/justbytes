{"QandAList":
	[
				{"category":"Java","topic_id":"23","question":"What is the Servlet?","answer":"A servlet is a Java programming language class that is used to extend the capabilities of servers that host applications accessed by means of a request- response programming model."},
				{"category":"Java","topic_id":"23","question":"What are the uses of Servlet?","answer":"Processing and/or storing data submitted by an HTML form.Providing dynamic content, e.g. returning the results of a database query to the client.A Servlet can handle multiple request concurrently and be used to develop high performance system. Managing state information on top of the stateless HTTP"},
				{"category":"Java","topic_id":"23","question":"What are the phases of the servlet life cycle?","answer":"Servlet class loading : For each servlet defined in the deployment descriptor of the Web application, the servlet container locates and loads a class of the type of the servlet. This can happen when the servlet engine itself is started, or later when a client request is actually delegated to the servlet. Servlet instantiation : After loading, it instantiates one or more object instances of the servlet class to service the client requests.Initialization (call the init method) : After instantiation, the container initializes a servlet before it is ready to handle client requests. The container initializes the servlet by invoking its init() method, passing an object implementing the ServletConfig interface. In the init() method, the servlet can read configuration parameters from the deployment descriptor or perform any other one-time activities, so the init() method is invoked once and only once by the servlet container. Request handling (call the service method) : After the servlet is initialized, the container may keep it ready for handling client requests. When client requests arrive, they are delegated to the servlet through the service() method, passing the request and response objects as parameters. In the case of HTTP requests, the request and response objects are implementations of HttpServletRequest and HttpServletResponse respectively. In the HttpServlet class, the service() method invokes a different handler method for each type of HTTP request, doGet() method for GET requests, doPost() method for POST requests, and so on. Removal from service (call the destroy method) : A servlet container may decide to remove a servlet from service for various reasons, such as to conserve memory resources. To do this, the servlet container calls the destroy() method on the servlet. Once the destroy() method has been called, the servlet may not service any more client requests. Now the servlet instance is eligible for garbage collection"},
				{"category":"Java","topic_id":"23","question":"What is the GenericServlet class?","answer":"GenericServlet is an abstract class that implements the Servlet interface and the ServletConfig interface. In addition to the methods declared in these two interfaces, this class also provides simple versions of the lifecycle methods init and destroy, and implements the log method declared in the ServletContext interface. This class is known as generic servlet, since it is not specific to any protocol."},
				{"category":"Java","topic_id":"23","question":"What is the difference between doGet() and doPost()? ","answer":"In doGet() the parameters are appended to the URL and sent along with header information, whereas in doPost(), the information is sent through a socket back to the webserver and it won't show up in the URL bar.The amount of information you can send back using a GET is restricted as URLs can only be 1024 characters unline in POST where its unlimited.Parameters in GET are not encrypted as opposed to POST.doGet() should be idempotent.Operations requested through POST can have side effects for which the user can be held accountable."},
				{"category":"Java","topic_id":"23","question":"Should I override the service() method?","answer":"We never override the service method, since the HTTP Servlets have already taken care of it . The default service function invokes the doXXX() method corresponding to the method of the HTTP request.For example, if the HTTP request method is GET, doGet() method is called by default."},
				{"category":"Java","topic_id":"23","question":"What is a servlet context object?","answer":"A servlet context object contains the information about the Web application of which the servlet is a part. It also provides access to the resources common to all the servlets in the application. Each Web application in a container has a single servlet context associated with it."},
				{"category":"Java","topic_id":"23","question":"What are the differences between the ServletConfig interface and the ServletContext interface?","answer":"The ServletConfig interface is implemented by the servlet container in order to pass configuration information to a servlet.A ServletContext defines a set of methods that a servlet uses to communicate with its servlet container.There is one ServletConfig parameter per servlet.There is one ServletContext for the entire webapp and all the servlets in a webapp share it.The param-value pairs for ServletConfig object are specified in the <init-param> within the <servlet> tags in the web.xml file.The param-value pairs for ServletContext object are specified in the <context-param> tags in the web.xml file. "},
				{"category":"Java","topic_id":"23","question":"What's the difference between forward() and sendRedirect() methods?","answer":"A forward is performed internally by the servlet.A redirect is a two step process, where the web application instructs the browser to fetch a second URL, which differs from the original.With forward(),the  browser is completely unaware that it has taken place, so its original URL remains intact, which is opposite in case of sendRedirect().Both resources must be part of the same context when forwarding."},
				{"category":"Java","topic_id":"23","question":"What is the difference between the include() and forward() methods?","answer":"The RequestDispatcher include() method inserts the the contents of the specified resource directly in the flow of the servlet response, as if it were part of the calling servlet.The RequestDispatcher forward() method is used to show a different resource in place of the servlet that was originally called. "},
				{"category":"Java","topic_id":"23","question":"What is the <load-on-startup> element?","answer":"The <load-on-startup> element of a deployment descriptor is used to load a servlet file when the server starts instead of waiting for the first request. It is also used to specify the order in which the files are to be loaded."},
				{"category":"Java","topic_id":"23","question":"What is session?","answer":"A session refers to all the requests that a single client might make to a server in the course of viewing any pages associated with a given application. Sessions are specific to both the individual user and the application. As a result, every user of an application has a separate session and has access to a separate set of session variables. Session tracking is a mechanism that servlets use to maintain state about a series of requests from the same user (that is, requests originating from the same browser) across some period of time. "},
				{"category":"Java","topic_id":"23","question":"What are the types of Session Tracking ?","answer":"URL rewriting : URL rewriting is a method of session tracking in which some extra data (session ID) is appended at the end of each URL. This extra data identifies the session. The server can associate this session identifier with the data it has stored about that session. This method is used with browsers that do not support cookies or where the user has disabled the cookies.Hidden Form Fields : Similar to URL rewriting. The server embeds new hidden fields in every dynamically generated form page for the client. When the client submits the form to the server the hidden fields identify the client.Cookies : Cookie is a small amount of information sent by a servlet to a Web browser. Saved by the browser, and later sent back to the server in subsequent requests. A cookie has a name, a single value, and optional attributes. A cookie's value can uniquely identify a client.Secure Socket Layer (SSL) Sessions : Web browsers that support Secure Socket Layer communication can use SSL's support via HTTPS for generating a unique session key as part of the encrypted conversation."},
				{"category":"Java","topic_id":"23","question":"What are some advantages of storing session state in cookies?","answer":"Cookies are usually persistent, so for low-security sites, user data that needs to be stored long-term (such as a user ID, historical information, etc.) can be maintained easily with no server interaction. For small- and medium-sized session data, the entire session data (instead of just the session ID) can be kept in the cookie."},
				{"category":"Java","topic_id":"23","question":"How can an existing session be invalidated?","answer":"Setting timeout in the deployment descriptor: This can be done by specifying timeout in minutes between the <session-timeout>tags.Setting timeout programmatically: This will set the timeout for a specific session.setMaxInactiveInterval(int seconds)"},
				{"category":"Java","topic_id":"23","question":"How can the session in Servlet can be destroyed?","answer":" Programatically : Using session.invalidate() method, which makes the container abonden the session on which the method is called. When the server itself is shutdown."},
				{"category":"Java","topic_id":"23","question":"What are filters?","answer":"Filters are Java components that are used to intercept an incoming request to a Web resource and a response sent back from the resource. It is used to abstract any useful information contained in the request or response like Security checks, Modifying the request or response,Data compression, Logging and auditing,Response compression"}			
	]
}