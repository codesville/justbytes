{"QandAList":
	[
				{"category":"Spring","topic_id":"22","question":"What is inversion of control (IOC) or Dependency Injection?","answer":"Inversion of control (IOC) or dependency injection (DI) is a design pattern used to give control to the assembler of classes. Generally, if a class wants to use another class, it instantiates desired class. But using this design pattern, the instantiation control is provided to the assembler. Assembler instantiates the required class and injects it in using class."},
				{"category":"Spring","topic_id":"22","question":"What are different types of DI?","answer":"Constructor Injection, Setter Injection, Interface Injection"},
				{"category":"Spring","topic_id":"22","question":"What are different modules in Spring?","answer":"Core: Springs IoC container and core services,Web: Spring MVC and ability to integrate Spring with other web frameworks like Strusts, Tapestry, JSF etc. JEE: Java enterprise services like EJB support, JMX, JMS, JCA etc. ORM: Support to integrate with object relation mapping frameworks like hibernate, iBatis, Toplink etc. DAO: Helps in implementing Data Access Object design pattern. Provides support for Spring JDBC transaction management. AOP: Implementation of cross cutting concerns through Spring AOP and AspectJ."},
				{"category":"Spring","topic_id":"22","question":"What is BeanFactory?","answer":"BeanFactory provides configuration framework to Spring object creation and basic functionality around object management."},
				{"category":"Spring","topic_id":"22","question":"What is ApplicationContext?","answer":"ApplicationContext is built around Spring's BeanFactory and it provides enterprise centric features e.g. AOP features, message resourcing, event propagating, application-layer-specific contexts to applications."},
				{"category":"Spring","topic_id":"22","question":"How to instantiate IoC container?","answer":"ApplicationContext context = new ClassPathXmlApplicationContext(new String[] {\"spring-config.xml\"});, or using FileSystemXmlApplicationContext or XmlWebApplicationContext "},
				{"category":"Spring","topic_id":"22","question":"How to integrate multiple bean configuration xmls?","answer":"<beans>   <import resource=\"services.xml\"/>   <import resource=\"daos.xml\"/>"},
				{"category":"Spring","topic_id":"22","question":"What is autowiring?","answer":"By Autowiring, Spring injects dependencies without having to specify those explicitly. Spring inspects bean factory contents and establishes relationships amongst collaborating beans. To implement it, just add autowire property in xml configuration."},
				{"category":"Spring","topic_id":"22","question":"How can beans be loaded without defining them in the application context file?","answer":"Autowire the beans using @Autowire and enable <context:annotation-config/>. <context:component-scan base-package='org.example'/>"},
				{"category":"Spring","topic_id":"22","question":"What are different modes of autowiring?","answer":"no: No autowiring. byName: Autowiring by property name, means bean matching property name is autowired. byType: Bean having type as that of property type is autowired. constructor: Similar to byType just that the property is in constructor. autodetect: Spring is allowed to select autowiring from byType and constructor."},
				{"category":"Spring","topic_id":"22","question":"What are different bean scopes available to configure?","answer":"singleton: One bean instance per IoC container, prototype: Any number of instances of bean. request: Within HTTPRequest object scope. session: As long as HttpSession is alive. globalsession: Within life-cycle of global HttpSession. Applicable in portlet context usually."},
				{"category":"Spring","topic_id":"22","question":"How can you control bean instantiation process?","answer":"Bean instantiation by Spring can be controlled using initialization call backs. There are two ways of doing it. First is having a initialization method (say init()) and specifying it in bean configuration as 'init-method' property. Second is implementing InitializingBean interface and implementing afterPropertiesSet() method in it."},
				{"category":"Spring","topic_id":"22","question":"How do you implement inheritance in bean definition?","answer":"Bean definition inheritance can be implemented by specifying 'parent' property of the bean equal to its parent bean definition id. This bean class must have extended itself from the parent bean class."},
				{"category":"Spring","topic_id":"22","question":"How to integrate your Struts application with Spring? ","answer":"Configure Spring to manage your Actions as beans, using the ContextLoaderPlugin, and set their dependencies in a Spring context file. Or, subclass Spring's ActionSupport classes and grab your Spring-managed beans explicitly using a getWebApplicationContext() method."},
				{"category":"Spring","topic_id":"22","question":"Explain Spring DAO support ? ","answer":"The Data Access Object (DAO) support in Spring is aimed at making it easy to work with data access technologies like JDBC, Hibernate or JDO in a consistent way. This allows one to switch between the persistence technologies fairly easily and it also allows one to code without worrying about catching exceptions that are specific to each technology."},
				{"category":"Spring","topic_id":"22","question":"How to integrate Spring and Hibernate using HibernateDaoSupport?","answer":"Spring and Hibernate can integrate using Spring's SessionFactory called LocalSessionFactory. The integration process is of 3 steps. Configure the Hibernate SessionFactory. Extend your DAO Implementation from HibernateDaoSupport. Wire in Transaction Support with AOP "},
				{"category":"Spring","topic_id":"22","question":"What is AOP?","answer":"Aspect-oriented programming, or AOP, is a programming technique that allows programmers to modularize crosscutting concerns, or behavior that cuts across the typical divisions of responsibility, such as logging and transaction management. The core construct of AOP is the aspect, which encapsulates behaviors affecting multiple classes into reusable modules. "},
				{"category":"Spring","topic_id":"22","question":"What do you mean by Aspect ? ","answer":"A modularization of a concern that cuts across multiple objects. Transaction management is a good example of a crosscutting concern in J2EE applications. In Spring AOP, aspects are implemented using regular classes (the schema-based approach) or regular classes annotated with the @Aspect annotation (@AspectJ style)."},
				{"category":"Spring","topic_id":"22","question":"What do you mean by JointPoint?","answer":"A point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution."},
				{"category":"Spring","topic_id":"22","question":"What do you mean by Advice?","answer":"Action taken by an aspect at a particular join point. Different types of advice include 'around','before' and 'after' advice. Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors 'around' the join point."},
				{"category":"Spring","topic_id":"22","question":"How does Spring's Annotation based declarative transaction management work with a POJO/Bean?","answer":"Spring's declarative transaction management can be applied to a POJO or Bean by just declaring @Transactional at class level, interface level, for method defined in the interface and only for public methods from a class. All @Transactional annotations can have appropriate Element defined as well, like isolation, propagation, noRollbackFor, noRollbackForClassName, readOnly, rollbackFor, rollbackForClassName, timeout, value etc."},
				{"category":"Spring","topic_id":"22","question":"How can a bean be initiated lazily?","answer":"By using lazy-init='true' in the bean tag, Spring's ApplicationContext can be instructed not to eagerly instantiate and configure this bean.But can instantiate this bean on request only."},
				{"category":"Spring","topic_id":"22","question":"What are some annotations in Spring 3.0?","answer":"  @Autowired, @Resource,@Component,@PostConstruct ,@PreDestroy,@Configuration, @Bean, @DependsOn, @Primary, @Lazy, @Import, @ImportResource, @Value"},
				{"category":"Spring","topic_id":"22","question":"What is the pre-requisite for using request, session and global session scope for bean in SpringFramework version 3.0, as far as Spring ApplicationContext implementation is of concern?","answer":"For using scopes such as request, session and global session for   Beans used in SpringFramework's implementation for ApplicationContext is of concern, one should be using a web-aware Spring's ApplicationContext implementation such as XmlWebApplicationContext (from the package org.springframework.web.context.support) can be used."},
				{"category":"Spring","topic_id":"22","question":"What is the major difference over the definition of Singleton, as we know  from the GoF Singleton design pattern with that of Spring's Singleton scoped  bean?","answer":"GoF Singleton design pattern is the single instance of a class in a Classloader.  But in SpringFramework, Singleton scoped bean is single instance per container  per bean."},
				{"category":"Spring","topic_id":"22","question":"What would be the default scope for a bean in SpringFramework configuration  if the scope attribute is not mentioned in the bean tag?","answer":"By default scope for a bean is Singleton, when there is no scope attribute  value mentioned for that bean in the Spring configuration file."},
				{"category":"Spring","topic_id":"22","question":"What are the various View Resolvers available with Spring Framework version 3.0?","answer":"XsltViewResolver, InternalResourceViewResolver, ResourceBundleViewResolver,UrlBasedViewResolver, VelocityViewResolver, XmlViewResolver, VelocityLayoutViewResolver,FreeMarkerViewResolver, BeanNameViewResolver, ContentNegotiatingViewResolver,JasperReportsViewResolver, TilesViewResolver"},
				{"category":"Spring","topic_id":"22","question":"What view resolver have caching mechanism enabled?","answer":"ResourceBundleViewResolver, UrlBasedViewResolver, XmlViewResolver"},
				{"category":"Spring","topic_id":"22","question":"What are the ways one can archive view resolution in Spring Web MVC?","answer":"One can achive view resolution in Spring Web MVC by view configuration using bean names,a properties file or custom ViewResolver implementation by user."},
				{"category":"Spring","topic_id":"22","question":"What represents a Model in Spring's MVC architecture?","answer":"Spring's Model is based on Map interface, so by this abstraction of Model,loose coupling between View and Model is achieved in Spring Web MVC implementation."},
				{"category":"Spring","topic_id":"22","question":"How to send response data directly to the response object without adding it to the Model or not to be considered as view name?","answer":"By using annotation @ResponseBody tagged to a method for making the return value from the same method added to the response body, and not making it as Model value or as view name."},
				{"category":"Spring","topic_id":"22","question":"What are the various special beans instances associated with Spring's WebApplicationContext instance?","answer":"Controller instance, Handling mapping, various resolvers such as view resolvers,  locale resolvers, Theme resolver, exception handler resolvers, multipart file   resolvers."},
				{"category":"Spring","topic_id":"22","question":"From design/abstraction perspective how Spring Framework's Web MVC module uses various UI rendering technologies/frameworks?","answer":"As Model element from Spring's Web MVC Module is based on Map interface, one can easily integrate various UI rendering technologies such as JSP, XSLT, JSTL, Velocity Templates, PDF and many more utilities."},
				{"category":"Spring","topic_id":"22","question":"What are the different Spring remoting options?","answer":"Spring Remote Method Invocation (RMI), HTTP invoker,Hessian,Burlap,JAX-RPC,JAX-WS, JMS"}
	]
}